buildscript {
    repositories {
        mavenCentral()
        maven {
            url 'http://repo.spring.io/release'
        }
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }
    dependencies {
        classpath('org.springframework.boot:spring-boot-gradle-plugin:1.4.0.RELEASE')
        classpath('org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.1')
    }
}

apply plugin: 'spring-boot'
apply plugin: 'war'

// This will apply the Java plugin to our project, which adds a number of tasks to our project.
apply plugin: 'java'

// To create the Eclipse-specific descriptor files, like .project, we need to add 
// the eclipse plugin to our build file
apply plugin: 'eclipse-wtp'
apply plugin: 'idea'

apply plugin: 'org.sonarqube'

// We will specify the version number and name for our jar.
jar {
    baseName = 'hello'
    version = '1.0'
}

war {
    baseName = 'ingweb'
}

// Java version compatibility to use when compiling Java source.
sourceCompatibility = 1.8
// Java version to generate classes for.
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

configurations {
    providedRuntime
    all {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }
}

// Usually a project will have some dependencies on external JAR files. 
// To reference these JAR files in the project, we need to tell Gradle where to find
// them. In Gradle, artifacts such as JAR files, are located in a repository.
dependencies {
    compile 'org.springframework.boot:spring-boot-starter-web'
    compile 'javax.servlet:jstl'

    compile 'org.springframework.boot:spring-boot-starter-log4j2'

    compile 'org.springframework.boot:spring-boot-starter-websocket'

    compile 'org.webjars:bootstrap:3.3.5'
    compile 'org.webjars:jquery:2.1.4'

    providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
    providedRuntime 'org.apache.tomcat.embed:tomcat-embed-jasper'

    testCompile 'org.springframework.boot:spring-boot-starter-test'
}


eclipse {
    classpath {
        containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
        containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
        file {
            whenMerged { c ->
                c.entries.findAll {entry -> entry.kind=='lib' && entry.moduleVersion.name?.startsWith('tomcat-')  }*.exported = false
            }
        }
    }
}

test {
    //we want display the following test events
    testLogging {
        events 'PASSED', 'STARTED', 'FAILED', 'SKIPPED'
    }
}
